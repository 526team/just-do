/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package User;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.JOptionPane;

import systemUI.TheMainUI;
import util.DBcls;
import util.Mypanel;

/**
 *
 * @author 23155
 */
public class Message3 extends Mypanel implements Runnable {

	Object[][] tab;
	Connection con;
	PreparedStatement ps;
	Statement st;
	ResultSet rs;

	/**
	 * Creates new form Message3
	 */
	public Message3() {
		initComponents();
		settable();
		new Thread(this).start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		abc = new javax.swing.JTable();
		jLabel1 = new javax.swing.JLabel();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();

		abc.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null } },
				new String[] { "User", "Status", "User type", "LastLoginTime" }) {
			boolean[] canEdit = new boolean[] { false, false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane1.setViewportView(abc);
		abc.getColumnModel().getColumn(0).setResizable(false);
		abc.getColumnModel().getColumn(0).setPreferredWidth(50);
		abc.getColumnModel().getColumn(1).setResizable(false);
		abc.getColumnModel().getColumn(1).setPreferredWidth(50);
		abc.getColumnModel().getColumn(2).setResizable(false);
		abc.getColumnModel().getColumn(2).setPreferredWidth(50);
		abc.getColumnModel().getColumn(3).setResizable(false);
		abc.getColumnModel().getColumn(3).setPreferredWidth(50);

		jLabel1.setFont(new java.awt.Font("宋体", 3, 48)); // NOI18N
		jLabel1.setText(" UserManagement");

		jButton1.setFont(new java.awt.Font("宋体", 2, 18)); // NOI18N
		jButton1.setText("Delete");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2.setFont(new java.awt.Font("宋体", 2, 18)); // NOI18N
		jButton2.setText("Add");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		jButton3.setText("Refresh");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(193, 193, 193)
						.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(128, 128, 128)
						.addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, Short.MAX_VALUE))
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup().addContainerGap(114, Short.MAX_VALUE)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
												layout.createSequentialGroup()
														.addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE,
																411, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGap(31, 31, 31).addComponent(jButton3).addGap(29, 29, 29))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
												layout.createSequentialGroup()
														.addComponent(jScrollPane1,
																javax.swing.GroupLayout.PREFERRED_SIZE, 507,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGap(79, 79, 79)))));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup().addComponent(jLabel1).addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										layout.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE)
												.addComponent(jButton3).addGap(31, 31, 31)))
						.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(29, 29, 29)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(69, 69, 69)));
	}// </editor-fold>//GEN-END:initComponents

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton3ActionPerformed
		// TODO add your handling code here:
		settable();
	}// GEN-LAST:event_jButton3ActionPerformed

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		// TODO add your handling code here:

		if (tab[abc.getSelectedRow()][2].equals("administrator")) {
			JOptionPane.showInternalMessageDialog(this, "Cannot perform this operation");
		} else if (tab[abc.getSelectedRow()][2].equals("teacher")) {
			if (0 == JOptionPane.showConfirmDialog(this,
					"All courses that this teacher is responsible for will be deleted,Continue?"))
				deletet();
		} else {
			if (0 == JOptionPane.showConfirmDialog(this,
					"All infomation and courses of this student will be deleted,Continue?"))
				deletes();
		}
	}// GEN-LAST:event_jButton1ActionPerformed

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		TheMainUI.frame.setContentPane(new NewUser3());
		TheMainUI.frame.setVisible(true);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTable abc;
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane1;

	// End of variables declaration//GEN-END:variables
	void settable() {
		String sql[] = { "select count(name) from users",
				"select * from users u left join loginhistory l on u.name=l.name" };
		try {
			con = DBcls.getcon();
			ps = con.prepareStatement(sql[0]);
			int row = 0;
			rs = ps.executeQuery();
			if (rs.next())
				row = rs.getInt(1);
			tab = new Object[row][4];

			ps = con.prepareStatement(sql[1]);
			rs = ps.executeQuery();
			int i = 0;
			while (rs.next()) {
				tab[i][0] = rs.getString(1);
				tab[i][1] = rs.getString(4);
				tab[i][2] = rs.getString(2);
				tab[i][3] = rs.getTime(10);
				i++;
			}
			abc.setModel(new javax.swing.table.DefaultTableModel(tab,
					new String[] { "User", "Status", "User type", "LastLoginTime" }) {
				boolean[] canEdit = new boolean[] { false, false, false, false };

				public boolean isCellEditable(int rowIndex, int columnIndex) {
					return canEdit[columnIndex];
				}
			});
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	void deletet() {

		String sql[] = { "select CID from course where tname=?", "delete from stu_course where CID=?",
				"delete from teacherdetail where tname=?", "delete from users where name=?" };
		try {
			ps = con.prepareStatement(sql[0]);
			ps.setString(1, tab[abc.getSelectedRow()][0].toString());
			ResultSet rs2 = ps.executeQuery();
			while (rs2.next()) {
				ps = con.prepareStatement(sql[1]);
				ps.setInt(1, rs2.getInt(1));
				System.out.println(ps);
				ps.execute();
			}
			ps = con.prepareStatement(sql[2]);
			ps.setString(1, tab[abc.getSelectedRow()][0].toString());
			System.out.println(ps);
			ps.executeUpdate();

			ps = con.prepareStatement(sql[3]);
			ps.setString(1, tab[abc.getSelectedRow()][0].toString());
			System.out.println(ps);
			if (ps.executeUpdate() > 0)
				JOptionPane.showInternalMessageDialog(this, "Succeeded");

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	void deletes() {

		String sql[] = { "select CID from stu_course where SID in (select SID from studetail Where sname=?)",
				"update course set rnumber=rnumber-1 where CID=?",
				"delete from stu_course where SID in (select SID from studetail Where sname=?)",
				"delete from studetail where sname=?", "delete from users where name=?" };
		try {
			ps = con.prepareStatement(sql[0]);
			ps.setString(1, tab[abc.getSelectedRow()][0].toString());
			ResultSet rs2 = ps.executeQuery();
			while (rs2.next()) {
				ps = con.prepareStatement(sql[1]);
				ps.setInt(1, rs2.getInt(1));
				System.out.println(ps);
				ps.execute();
			}
			ps = con.prepareStatement(sql[2]);
			ps.setString(1, tab[abc.getSelectedRow()][0].toString());
			ps.executeUpdate();

			ps = con.prepareStatement(sql[3]);
			ps.setString(1, tab[abc.getSelectedRow()][0].toString());
			ps.executeUpdate();

			ps = con.prepareStatement(sql[4]);
			ps.setString(1, tab[abc.getSelectedRow()][0].toString());
			if (ps.executeUpdate() > 0)
				JOptionPane.showInternalMessageDialog(this, "Succeeded");

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while (true) {
			try {
				Thread.currentThread().sleep(100);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (abc.getSelectedRow() > -1) {
				jButton1.setEnabled(true);
			} else {
				jButton1.setEnabled(false);
			}
		}
	}
}
